return(list("pwr"=g1, "fdr"=g2))
}
createHistNullAltGenes <- function(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, lim){
# creates 2 histograms. One with 1 treatment sample only.
# the other with average across m treatment samples.
# the df's will be merged into a single one so that facet_wrap can be used
# to standardize the 2 y-axes.
n = n0 + nA
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
df <- df %>% rownames_to_column('genename') %>% mutate(gene_class =
(ifelse(str_detect(genename, "^null"), "null", "alt")))
# set up control-samples df
singleCtrlSample = df[,c(1,2,2*m+2)]
avgCtrls <- cbind.data.frame(df[1], rowSums(df[2:(m+1)])/m, df[,ncol(df)])
colnames(singleCtrlSample) <- c("genename", "x", "gene_class")
colnames(avgCtrls) <- c("genename", "x", "gene_class")
mrgedCtrls <- rbind.data.frame(singleCtrlSample, avgCtrls) %>%
mutate(hist=factor(c(rep("single", n), rep("average", n)), levels=c("single",
"average")))
# set up treatment-samples df
singleTrtmtSample = df[,c(1,m+2,2*m+2)]
avgTrtmts = cbind.data.frame(df[1], rowSums(df[(m+2):(2*m+1)])/m, df[,ncol(df)])
colnames(singleTrtmtSample) <- c("genename", "x", "gene_class")
colnames(avgTrtmts) <- c("genename", "x", "gene_class")
mrged <- rbind.data.frame(singleTrtmtSample, avgTrtmts) %>%
mutate(hist=factor(c(rep("single",n),rep("average",n)),levels=c("single",
"average")))
# function that creates horizontal double histogram
createDoubleGrobObj <- function(df, title1){
ggplot(df, aes(x=x)) + geom_histogram(aes(fill=gene_class), alpha=.7,
position="identity", na.rm=TRUE) +
facet_wrap(~hist, ncol =2) +
ggtitle(title1) +
xlab("Standard Deviations from Z-Normalized Expression") +
xlim(c(-lim,lim)) +
theme(legend.position = c(0.9, 0.7),
legend.background = element_rect(size=0.5),
panel.border = element_rect(colour="black", fill=NA, size=1),
plot.margin= unit(c(0.5, 1, 0.5, 1), "cm")) +
scale_fill_manual(values = pal2)
}
title1=paste(title, m, " Control Samples")
mrgedCtrlGrob <- createDoubleGrobObj(mrgedCtrls, title1)
title2=paste(title, m, " Treatment Samples")
mrgedGrob <- createDoubleGrobObj(mrged, title2)
return(list("treatment"=mrgedGrob, "control" = mrgedCtrlGrob))
}
powerL = c(); powerAdjL = c(); fdrL = c(); fdrAdjL = c()
for(m in M){
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
lst = FDR_Power_BH(df, pvalcut = 0.05, fdrCut = 0.05)
powerL <- c(powerL, lst$pwr); powerAdjL <- c(powerAdjL, lst$pwrAdj)
fdrL <- c(fdrL, lst$fdr); fdrAdjL <- c(fdrAdjL, lst$fdrAdj)
}
#, fig.height=12, fig.width=9, out.width='90%', out.height='90%'}
title = paste0("Demonstration of Random Gene Expression Noise
Cancellation by Averaging Across ")
x_lim = 4
m=8
gHist <- createHistNullAltGenes(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, x_lim)
title = "Number of Replicates Effect on Power, FDR Using Idealized Data"
grobs <- printFdrPowerPlots(powerL, powerAdjL, fdrL, fdrAdjL)
#g2 <- grid.arrange(grobs$pwr, grobs$fdr, ncol=2, top=title)
main_title = paste0("Expression Distributions, Power, and FDR using Idealized Data\n", "with Diff Expressed Genes Averaging ", muA, " STDEV from Other Genes")
#png(filename="/Users/mjk/OtherApps/R/sd2.png")
suppressMessages(grid.arrange(gHist$control, gHist$treatment,
grid.arrange(grobs$pwr, grobs$fdr, ncol=2, top=title),
nrow=3,
top=textGrob(main_title, gp=gpar(fontsize=15))))
#plot(suppressMessages(grid.arrange(gHist$control, gHist$treatment, g2, nrow=3,
#                              top=textGrob(main_title, gp=gpar(fontsize=18)))))
#dev.off()
muA = 3
###
powerL = c(); powerAdjL = c(); fdrL = c(); fdrAdjL = c()
for(m in M){
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
lst = FDR_Power_BH(df, pvalcut = 0.05, fdrCut = 0.05)
powerL <- c(powerL, lst$pwr); powerAdjL <- c(powerAdjL, lst$pwrAdj)
fdrL <- c(fdrL, lst$fdr); fdrAdjL <- c(fdrAdjL, lst$fdrAdj)
}
###
title = paste0("Demonstration of Random Gene Expression Noise
Cancellation by Averaging Across ")
x_lim = 4
m=8
gHist <- createHistNullAltGenes(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, x_lim)
title = "Number of Replicates Effect on Power, FDR Using Idealized Data"
grobs <- printFdrPowerPlots(powerL, powerAdjL, fdrL, fdrAdjL)
g2 <- grid.arrange(grobs$pwr, grobs$fdr, ncol=2, top=title)
main_title = paste0("Expression Distributions, Power, and FDR using Idealized Data\n", "with Diff Expressed Genes Averaging ", muA, " STDEV from Other Genes")
suppressMessages(grid.arrange(gHist$control, gHist$treatment, g2, nrow=3,
top=textGrob(main_title, gp=gpar(fontsize=15))))
knitr::opts_chunk$set(echo = TRUE, fig.height=12, fig.width=9,
out.width='90%', out.height='90%',
fig.align = "center", dpi=300) #(dev = 'pdf)
# dpi=300 was essential for outputting quality figures using knitr
require(ggplot2)
require(dplyr)
require(tibble)
require(stringr)
require(grid)
require(gridExtra)
require(gtable)
require(genefilter)
require(ggpubr)
require(knitr)
theme_set(theme_minimal())
theme_update(plot.title = element_text(hjust=0.5))
pal <- c("#7570b3", "#1b9e77")
pal2 <- c("#ff7f00", "#377eb8")
###################
# Set parameters
n = 10000                                   # number of total genes
fracAlt = 0.1                               # fraction of genes with condition=alt
M <- c(2, 4, 6, 8, 12, 16, 24, 32)                     # varying # replicates per ctrl/exp
mu0 = 0                                     # null gene mean
sd0 = 1                                     # null gene sd
muA = 2                                     # alt gene mean
sdA = 1                                     # alt gene sd
###################
nA = round(n * fracAlt)                     # alt genes in DF
n0 = n - nA                                 # null genes in DF
createMultiSampleDF <- function(n, fracAlt, m, mu0, sd0, muA, sdA){
nA = round(n * fracAlt)                     # alt genes in DF
n0 = n - nA                                 # null genes in DF
altGeneLabels <- paste0(rep("alt", nA), 1:nA)
nullGeneLabels <- paste0(rep("null", n0), 1:n0)
geneLabels <- c(nullGeneLabels, altGeneLabels)
ctrlSamples <- replicate(m, rnorm(n, mu0, sd0)) # background dist for all genes
trtmtNullDist <-replicate(m, rnorm(n0, mu0, sd0)) # null-gene dist same in treatment
trtmtAltDist <- replicate(m, c(rnorm(nA/2, muA, sdA),rnorm(nA/2, -muA, sdA)))
# alt-gene expression rises or falls by muA in treatment samples.
trtmtSamples <- rbind.data.frame(trtmtNullDist, trtmtAltDist)
colnames(ctrlSamples) <- paste0("Ctrl", 1:m)
colnames(trtmtSamples) <- paste0("Trtmt", 1:m)
df <- cbind.data.frame(ctrlSamples, trtmtSamples)
rownames(df) <- geneLabels
return(df)
}
FDR_Power_BH <- function(df, pvalcut = 0.05, fdrCut = 0.05){
# just use row T-Tests for now, from the 'genefilter' package:
s <- factor(c(rep("c",m),rep("e",m)))
rtt <- rowttests(as.matrix(df), s)
# add 'genename' and 'class' columns and adjusted p-values
rtt_tbl <- rtt %>%
rownames_to_column('genename') %>%
mutate(p.value.adjust = p.adjust(rtt$p.value, method="BH")) %>%
mutate(class = (ifelse(str_detect(genename, "^null"), "actual=0",
"actual=1"))) %>%
as_tibble()
# makes confusion matrices for p-value and adjusted p-value
confM <- table(rtt_tbl$class, ifelse(rtt_tbl$p.value >= pvalcut, "predict=0",
"predict=1"))
confM_adj <- table(rtt_tbl$class, ifelse(rtt_tbl$p.value.adjust >= pvalcut,
"predict=0", "predict=1"))
# handling error of confM_adj having no "predict=1" events:
if(sum(dim(confM_adj)) != 4){
confM_adj <- cbind(confM_adj, c(0,0))
colnames(confM_adj) <- c("predict=0", "predict=1")
}
# calculate FDR and Power before and after B-H adjustment
fnr <- confM[2,1]/sum(confM[2,]) # -- type II error rate (things we missed)
fdr <- confM[1,2]/sum(confM[,2]) # -- fdr. Things we predicted that we shouldn't have
fnrAdj <- confM_adj[2,1]/sum(confM_adj[2,])
fdrAdj <- confM_adj[1,2]/sum(confM_adj[,2])
tpr = 1 - fnr; tprAdj = 1 - fnrAdj
return(list("pwr"=tpr, "pwrAdj"=tprAdj, "fdr"=fdr, "fdrAdj"=fdrAdj,
"confM" = confM, "confM_adj" = confM_adj))
}
printFdrPowerPlots <- function(powerL, powerAdjL, fdrL, fdrAdjL){
pwr <- data.frame(cbind(rep(M,2), c(powerL, powerAdjL), c(rep("preBH",length(M)),
rep("postBH", length(M)))), stringsAsFactors = FALSE)
colnames(pwr) <- c("Number_Replicates", "Power", "PrePostBH")
class(pwr$Power) <- "numeric"
class(pwr$Number_Replicates) <- "numeric"
pwr$PrePostBH <- as.factor(pwr$PrePostBH)
falseD <- data.frame(cbind(rep(M,2), c(fdrL, fdrAdjL), c(rep("preBH",length(M)),
rep("postBH", length(M)))), stringsAsFactors = FALSE)
colnames(falseD) <- c("Number_Replicates", "FDR", "PrePostBH")
class(falseD$Number_Replicates) <- "numeric"
class(falseD$FDR) <- "numeric"
falseD$PrePostBH <- as.factor(falseD$PrePostBH)
g1 <- ggplot(pwr, aes(x=Number_Replicates, y=Power)) +
geom_point(aes(colour=PrePostBH), na.rm=TRUE, size=3) +
theme(legend.position=c(0.8, 0.2),
legend.justification = "centre",
legend.background=element_rect(size=0.5),
panel.border = element_rect(colour="black", fill=NA, size=1),
plot.margin = unit(c(0.5,0.5,0.5,1),"cm")) +
scale_color_manual(values=pal) +
scale_y_continuous(limits=c(-0.05,1.05))
g2 <- ggplot(falseD, aes(x=Number_Replicates, y=FDR)) +
geom_point(aes(colour=PrePostBH), na.rm=TRUE, size=3) +
geom_hline(yintercept=0.05, linetype="dotted") +
theme(legend.position = c(0.8, 0.8),
legend.justification= "centre",
legend.background = element_rect(size=0.5),
panel.border = element_rect(colour="black", fill=NA, size=1),
plot.margin = unit(c(0.5,1,0.5,0.5),"cm")) +
scale_color_manual(values=pal) +
scale_y_continuous(limits=c(-0.05, 1.05))
#returnList <- list("pwr"=g1, "fdr"=g2)
return(list("pwr"=g1, "fdr"=g2))
}
createHistNullAltGenes <- function(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, lim){
# creates 2 histograms. One with 1 treatment sample only.
# the other with average across m treatment samples.
# the df's will be merged into a single one so that facet_wrap can be used
# to standardize the 2 y-axes.
n = n0 + nA
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
df <- df %>% rownames_to_column('genename') %>% mutate(gene_class =
(ifelse(str_detect(genename, "^null"), "null", "alt")))
# set up control-samples df
singleCtrlSample = df[,c(1,2,2*m+2)]
avgCtrls <- cbind.data.frame(df[1], rowSums(df[2:(m+1)])/m, df[,ncol(df)])
colnames(singleCtrlSample) <- c("genename", "x", "gene_class")
colnames(avgCtrls) <- c("genename", "x", "gene_class")
mrgedCtrls <- rbind.data.frame(singleCtrlSample, avgCtrls) %>%
mutate(hist=factor(c(rep("single", n), rep("average", n)), levels=c("single",
"average")))
# set up treatment-samples df
singleTrtmtSample = df[,c(1,m+2,2*m+2)]
avgTrtmts = cbind.data.frame(df[1], rowSums(df[(m+2):(2*m+1)])/m, df[,ncol(df)])
colnames(singleTrtmtSample) <- c("genename", "x", "gene_class")
colnames(avgTrtmts) <- c("genename", "x", "gene_class")
mrged <- rbind.data.frame(singleTrtmtSample, avgTrtmts) %>%
mutate(hist=factor(c(rep("single",n),rep("average",n)),levels=c("single",
"average")))
# function that creates horizontal double histogram
createDoubleGrobObj <- function(df, title1){
ggplot(df, aes(x=x)) + geom_histogram(aes(fill=gene_class), alpha=.7,
position="identity", na.rm=TRUE) +
facet_wrap(~hist, ncol =2) +
ggtitle(title1) +
xlab("Standard Deviations from Z-Normalized Expression") +
xlim(c(-lim,lim)) +
theme(legend.position = c(0.9, 0.7),
legend.background = element_rect(size=0.5),
panel.border = element_rect(colour="black", fill=NA, size=1),
plot.margin= unit(c(0.5, 1, 0.5, 1), "cm")) +
scale_fill_manual(values = pal2)
}
title1=paste(title, m, " Control Samples")
mrgedCtrlGrob <- createDoubleGrobObj(mrgedCtrls, title1)
title2=paste(title, m, " Treatment Samples")
mrgedGrob <- createDoubleGrobObj(mrged, title2)
return(list("treatment"=mrgedGrob, "control" = mrgedCtrlGrob))
}
powerL = c(); powerAdjL = c(); fdrL = c(); fdrAdjL = c()
for(m in M){
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
lst = FDR_Power_BH(df, pvalcut = 0.05, fdrCut = 0.05)
powerL <- c(powerL, lst$pwr); powerAdjL <- c(powerAdjL, lst$pwrAdj)
fdrL <- c(fdrL, lst$fdr); fdrAdjL <- c(fdrAdjL, lst$fdrAdj)
}
#, fig.height=12, fig.width=9, out.width='90%', out.height='90%'}
title = paste0("Demonstration of Random Gene Expression Noise
Cancellation by Averaging Across ")
x_lim = 4
m=8
gHist <- createHistNullAltGenes(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, x_lim)
title = "Number of Replicates Effect on Power, FDR Using Idealized Data"
grobs <- printFdrPowerPlots(powerL, powerAdjL, fdrL, fdrAdjL)
#g2 <- grid.arrange(grobs$pwr, grobs$fdr, ncol=2, top=title)
main_title = paste0("Expression Distributions, Power, and FDR using Idealized Data\n", "with Diff Expressed Genes Averaging ", muA, " STDEV from Other Genes")
#png(filename="/Users/mjk/OtherApps/R/sd2.png")
suppressMessages(grid.arrange(gHist$control, gHist$treatment,
grid.arrange(grobs$pwr, grobs$fdr, ncol=2, top=title),
nrow=3,
top=textGrob(main_title, gp=gpar(fontsize=15))))
#plot(suppressMessages(grid.arrange(gHist$control, gHist$treatment, g2, nrow=3,
#                              top=textGrob(main_title, gp=gpar(fontsize=18)))))
#dev.off()
#, fig.height=12, fig.width=9, out.width='90%', out.height='90%'}
muA = 3
###
powerL = c(); powerAdjL = c(); fdrL = c(); fdrAdjL = c()
for(m in M){
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
lst = FDR_Power_BH(df, pvalcut = 0.05, fdrCut = 0.05)
powerL <- c(powerL, lst$pwr); powerAdjL <- c(powerAdjL, lst$pwrAdj)
fdrL <- c(fdrL, lst$fdr); fdrAdjL <- c(fdrAdjL, lst$fdrAdj)
}
###
title = paste0("Demonstration of Random Gene Expression Noise
Cancellation by Averaging Across ")
x_lim = 4
m=8
gHist <- createHistNullAltGenes(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, x_lim)
title = "Number of Replicates Effect on Power, FDR Using Idealized Data"
grobs <- printFdrPowerPlots(powerL, powerAdjL, fdrL, fdrAdjL)
g2 <- grid.arrange(grobs$pwr, grobs$fdr, ncol=2, top=title)
main_title = paste0("Expression Distributions, Power, and FDR using Idealized Data\n", "with Diff Expressed Genes Averaging ", muA, " STDEV from Other Genes")
suppressMessages(grid.arrange(gHist$control, gHist$treatment, g2, nrow=3,
top=textGrob(main_title, gp=gpar(fontsize=15))))
grobs
arrangeGrob(grobs$pwr, grobs$fdr, ncol=2, top="Hello")
tmp <- arrangeGrob(grobs$pwr, grobs$fdr, ncol=2, top="Hello")
class(tmp)
grid.arrange(gHist$control, gHist$treatment, tmp, nrow = 3)
knitr::opts_chunk$set(echo = TRUE, fig.height=12, fig.width=9,
out.width='90%', out.height='90%',
fig.align = "center", dpi=300) #(dev = 'pdf)
# dpi=300 was essential for outputting quality figures using knitr
require(ggplot2)
require(dplyr)
require(tibble)
require(stringr)
require(grid)
require(gridExtra)
require(gtable)
require(genefilter)
require(ggpubr)
require(knitr)
theme_set(theme_minimal())
theme_update(plot.title = element_text(hjust=0.5))
pal <- c("#7570b3", "#1b9e77")
pal2 <- c("#ff7f00", "#377eb8")
###################
# Set parameters
n = 10000                                   # number of total genes
fracAlt = 0.1                               # fraction of genes with condition=alt
M <- c(2, 4, 6, 8, 12, 16, 24, 32)                     # varying # replicates per ctrl/exp
mu0 = 0                                     # null gene mean
sd0 = 1                                     # null gene sd
muA = 2                                     # alt gene mean
sdA = 1                                     # alt gene sd
###################
nA = round(n * fracAlt)                     # alt genes in DF
n0 = n - nA                                 # null genes in DF
createMultiSampleDF <- function(n, fracAlt, m, mu0, sd0, muA, sdA){
nA = round(n * fracAlt)                     # alt genes in DF
n0 = n - nA                                 # null genes in DF
altGeneLabels <- paste0(rep("alt", nA), 1:nA)
nullGeneLabels <- paste0(rep("null", n0), 1:n0)
geneLabels <- c(nullGeneLabels, altGeneLabels)
ctrlSamples <- replicate(m, rnorm(n, mu0, sd0)) # background dist for all genes
trtmtNullDist <-replicate(m, rnorm(n0, mu0, sd0)) # null-gene dist same in treatment
trtmtAltDist <- replicate(m, c(rnorm(nA/2, muA, sdA),rnorm(nA/2, -muA, sdA)))
# alt-gene expression rises or falls by muA in treatment samples.
trtmtSamples <- rbind.data.frame(trtmtNullDist, trtmtAltDist)
colnames(ctrlSamples) <- paste0("Ctrl", 1:m)
colnames(trtmtSamples) <- paste0("Trtmt", 1:m)
df <- cbind.data.frame(ctrlSamples, trtmtSamples)
rownames(df) <- geneLabels
return(df)
}
FDR_Power_BH <- function(df, pvalcut = 0.05, fdrCut = 0.05){
# just use row T-Tests for now, from the 'genefilter' package:
s <- factor(c(rep("c",m),rep("e",m)))
rtt <- rowttests(as.matrix(df), s)
# add 'genename' and 'class' columns and adjusted p-values
rtt_tbl <- rtt %>%
rownames_to_column('genename') %>%
mutate(p.value.adjust = p.adjust(rtt$p.value, method="BH")) %>%
mutate(class = (ifelse(str_detect(genename, "^null"), "actual=0",
"actual=1"))) %>%
as_tibble()
# makes confusion matrices for p-value and adjusted p-value
confM <- table(rtt_tbl$class, ifelse(rtt_tbl$p.value >= pvalcut, "predict=0",
"predict=1"))
confM_adj <- table(rtt_tbl$class, ifelse(rtt_tbl$p.value.adjust >= pvalcut,
"predict=0", "predict=1"))
# handling error of confM_adj having no "predict=1" events:
if(sum(dim(confM_adj)) != 4){
confM_adj <- cbind(confM_adj, c(0,0))
colnames(confM_adj) <- c("predict=0", "predict=1")
}
# calculate FDR and Power before and after B-H adjustment
fnr <- confM[2,1]/sum(confM[2,]) # -- type II error rate (things we missed)
fdr <- confM[1,2]/sum(confM[,2]) # -- fdr. Things we predicted that we shouldn't have
fnrAdj <- confM_adj[2,1]/sum(confM_adj[2,])
fdrAdj <- confM_adj[1,2]/sum(confM_adj[,2])
tpr = 1 - fnr; tprAdj = 1 - fnrAdj
return(list("pwr"=tpr, "pwrAdj"=tprAdj, "fdr"=fdr, "fdrAdj"=fdrAdj,
"confM" = confM, "confM_adj" = confM_adj))
}
printFdrPowerPlots <- function(powerL, powerAdjL, fdrL, fdrAdjL){
pwr <- data.frame(cbind(rep(M,2), c(powerL, powerAdjL), c(rep("preBH",length(M)),
rep("postBH", length(M)))), stringsAsFactors = FALSE)
colnames(pwr) <- c("Number_Replicates", "Power", "PrePostBH")
class(pwr$Power) <- "numeric"
class(pwr$Number_Replicates) <- "numeric"
pwr$PrePostBH <- as.factor(pwr$PrePostBH)
falseD <- data.frame(cbind(rep(M,2), c(fdrL, fdrAdjL), c(rep("preBH",length(M)),
rep("postBH", length(M)))), stringsAsFactors = FALSE)
colnames(falseD) <- c("Number_Replicates", "FDR", "PrePostBH")
class(falseD$Number_Replicates) <- "numeric"
class(falseD$FDR) <- "numeric"
falseD$PrePostBH <- as.factor(falseD$PrePostBH)
g1 <- ggplot(pwr, aes(x=Number_Replicates, y=Power)) +
geom_point(aes(colour=PrePostBH), na.rm=TRUE, size=3) +
theme(legend.position=c(0.8, 0.2),
legend.justification = "centre",
legend.background=element_rect(size=0.5),
panel.border = element_rect(colour="black", fill=NA, size=1),
plot.margin = unit(c(0.5,0.5,0.5,1),"cm")) +
scale_color_manual(values=pal) +
scale_y_continuous(limits=c(-0.05,1.05))
g2 <- ggplot(falseD, aes(x=Number_Replicates, y=FDR)) +
geom_point(aes(colour=PrePostBH), na.rm=TRUE, size=3) +
geom_hline(yintercept=0.05, linetype="dotted") +
theme(legend.position = c(0.8, 0.8),
legend.justification= "centre",
legend.background = element_rect(size=0.5),
panel.border = element_rect(colour="black", fill=NA, size=1),
plot.margin = unit(c(0.5,1,0.5,0.5),"cm")) +
scale_color_manual(values=pal) +
scale_y_continuous(limits=c(-0.05, 1.05))
#returnList <- list("pwr"=g1, "fdr"=g2)
return(list("pwr"=g1, "fdr"=g2))
}
createHistNullAltGenes <- function(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, lim){
# creates 2 histograms. One with 1 treatment sample only.
# the other with average across m treatment samples.
# the df's will be merged into a single one so that facet_wrap can be used
# to standardize the 2 y-axes.
n = n0 + nA
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
df <- df %>% rownames_to_column('genename') %>% mutate(gene_class =
(ifelse(str_detect(genename, "^null"), "null", "alt")))
# set up control-samples df
singleCtrlSample = df[,c(1,2,2*m+2)]
avgCtrls <- cbind.data.frame(df[1], rowSums(df[2:(m+1)])/m, df[,ncol(df)])
colnames(singleCtrlSample) <- c("genename", "x", "gene_class")
colnames(avgCtrls) <- c("genename", "x", "gene_class")
mrgedCtrls <- rbind.data.frame(singleCtrlSample, avgCtrls) %>%
mutate(hist=factor(c(rep("single", n), rep("average", n)), levels=c("single",
"average")))
# set up treatment-samples df
singleTrtmtSample = df[,c(1,m+2,2*m+2)]
avgTrtmts = cbind.data.frame(df[1], rowSums(df[(m+2):(2*m+1)])/m, df[,ncol(df)])
colnames(singleTrtmtSample) <- c("genename", "x", "gene_class")
colnames(avgTrtmts) <- c("genename", "x", "gene_class")
mrged <- rbind.data.frame(singleTrtmtSample, avgTrtmts) %>%
mutate(hist=factor(c(rep("single",n),rep("average",n)),levels=c("single",
"average")))
# function that creates horizontal double histogram
createDoubleGrobObj <- function(df, title1){
ggplot(df, aes(x=x)) + geom_histogram(aes(fill=gene_class), alpha=.7,
position="identity", na.rm=TRUE) +
facet_wrap(~hist, ncol =2) +
ggtitle(title1) +
xlab("Standard Deviations from Z-Normalized Expression") +
xlim(c(-lim,lim)) +
theme(legend.position = c(0.9, 0.7),
legend.background = element_rect(size=0.5),
panel.border = element_rect(colour="black", fill=NA, size=1),
plot.margin= unit(c(0.5, 1, 0.5, 1), "cm")) +
scale_fill_manual(values = pal2)
}
title1=paste(title, m, " Control Samples")
mrgedCtrlGrob <- createDoubleGrobObj(mrgedCtrls, title1)
title2=paste(title, m, " Treatment Samples")
mrgedGrob <- createDoubleGrobObj(mrged, title2)
return(list("treatment"=mrgedGrob, "control" = mrgedCtrlGrob))
}
powerL = c(); powerAdjL = c(); fdrL = c(); fdrAdjL = c()
for(m in M){
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
lst = FDR_Power_BH(df, pvalcut = 0.05, fdrCut = 0.05)
powerL <- c(powerL, lst$pwr); powerAdjL <- c(powerAdjL, lst$pwrAdj)
fdrL <- c(fdrL, lst$fdr); fdrAdjL <- c(fdrAdjL, lst$fdrAdj)
}
#, fig.height=12, fig.width=9, out.width='90%', out.height='90%'}
title = paste0("Demonstration of Random Gene Expression Noise
Cancellation by Averaging Across ")
x_lim = 4
m=8
gHist <- createHistNullAltGenes(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, x_lim)
title = "Number of Replicates Effect on Power, FDR Using Idealized Data"
grobs <- printFdrPowerPlots(powerL, powerAdjL, fdrL, fdrAdjL)
g2 <- arrangeGrob(grobs$pwr, grobs$fdr, ncol=2, top=title)
# arrangeGrob can be saved to variable, whereas arrange.grid is always associated
# with a device, and the printing therefore cannot be suppressed until later...
main_title = paste0("Expression Distributions, Power, and FDR using Idealized Data\n", "with Diff Expressed Genes Averaging ", muA, " STDEV from Other Genes")
#png(filename="/Users/mjk/OtherApps/R/sd2.png")
suppressMessages(grid.arrange(gHist$control, gHist$treatment,
g2,
nrow=3,
top=textGrob(main_title, gp=gpar(fontsize=15))))
#plot(suppressMessages(grid.arrange(gHist$control, gHist$treatment, g2, nrow=3,
#                              top=textGrob(main_title, gp=gpar(fontsize=18)))))
#dev.off()
#, fig.height=12, fig.width=9, out.width='90%', out.height='90%'}
muA = 3
###
powerL = c(); powerAdjL = c(); fdrL = c(); fdrAdjL = c()
for(m in M){
df = createMultiSampleDF(n, fracAlt, m, mu0, sd0, muA, sdA)
lst = FDR_Power_BH(df, pvalcut = 0.05, fdrCut = 0.05)
powerL <- c(powerL, lst$pwr); powerAdjL <- c(powerAdjL, lst$pwrAdj)
fdrL <- c(fdrL, lst$fdr); fdrAdjL <- c(fdrAdjL, lst$fdrAdj)
}
###
title = paste0("Demonstration of Random Gene Expression Noise
Cancellation by Averaging Across ")
x_lim = 4
m=8
gHist <- createHistNullAltGenes(nA, n0, fracAlt, m, mu0, muA, sd0, sdA, title, x_lim)
title = "Number of Replicates Effect on Power, FDR Using Idealized Data"
grobs <- printFdrPowerPlots(powerL, powerAdjL, fdrL, fdrAdjL)
g2 <- grid.arrange(grobs$pwr, grobs$fdr, ncol=2, top=title)
main_title = paste0("Expression Distributions, Power, and FDR using Idealized Data\n", "with Diff Expressed Genes Averaging ", muA, " STDEV from Other Genes")
suppressMessages(grid.arrange(gHist$control, gHist$treatment, g2, nrow=3,
top=textGrob(main_title, gp=gpar(fontsize=15))))
load("/Users/mjk/Downloads/diamonds.rda")
head(diamonds)
setwd("~/Desktop/Tresorit_iOS/projects/RNA-Seq/RNASeq_Replicates/")
dir()
